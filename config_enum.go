// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package paginator

import (
	"errors"
	"fmt"
)

const (
	// KeySuccess is a Key of type Success.
	KeySuccess Key = iota
	// KeyPage is a Key of type Page.
	KeyPage
	// KeyPerPage is a Key of type Per_page.
	KeyPerPage
	// KeyLastPage is a Key of type Last_page.
	KeyLastPage
	// KeyNextPage is a Key of type Next_page.
	KeyNextPage
	// KeyPreviousPage is a Key of type Previous_page.
	KeyPreviousPage
	// KeyData is a Key of type Data.
	KeyData
	// KeyCurrentPath is a Key of type Current_path.
	KeyCurrentPath
	// KeyFirstPageUrl is a Key of type First_page_url.
	KeyFirstPageUrl
	// KeyLastPageUrl is a Key of type Last_page_url.
	KeyLastPageUrl
	// KeyNextPageUrl is a Key of type Next_page_url.
	KeyNextPageUrl
	// KeyPrevPageUrl is a Key of type Prev_page_url.
	KeyPrevPageUrl
	// KeyCurrentPage is a Key of type Current_page.
	KeyCurrentPage
	// KeyTotal is a Key of type Total.
	KeyTotal
	// KeyPath is a Key of type Path.
	KeyPath
	// KeyKeyMax is a Key of type Key_max.
	KeyKeyMax
)

var ErrInvalidKey = errors.New("not a valid Key")

const _KeyName = "successpageper_pagelast_pagenext_pageprevious_pagedatacurrent_pathfirst_page_urllast_page_urlnext_page_urlprev_page_urlcurrent_pagetotalpathkey_max"

var _KeyMap = map[Key]string{
	KeySuccess:      _KeyName[0:7],
	KeyPage:         _KeyName[7:11],
	KeyPerPage:      _KeyName[11:19],
	KeyLastPage:     _KeyName[19:28],
	KeyNextPage:     _KeyName[28:37],
	KeyPreviousPage: _KeyName[37:50],
	KeyData:         _KeyName[50:54],
	KeyCurrentPath:  _KeyName[54:66],
	KeyFirstPageUrl: _KeyName[66:80],
	KeyLastPageUrl:  _KeyName[80:93],
	KeyNextPageUrl:  _KeyName[93:106],
	KeyPrevPageUrl:  _KeyName[106:119],
	KeyCurrentPage:  _KeyName[119:131],
	KeyTotal:        _KeyName[131:136],
	KeyPath:         _KeyName[136:140],
	KeyKeyMax:       _KeyName[140:147],
}

// String implements the Stringer interface.
func (x Key) String() string {
	if str, ok := _KeyMap[x]; ok {
		return str
	}
	return fmt.Sprintf("Key(%d)", x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x Key) IsValid() bool {
	_, ok := _KeyMap[x]
	return ok
}

var _KeyValue = map[string]Key{
	_KeyName[0:7]:     KeySuccess,
	_KeyName[7:11]:    KeyPage,
	_KeyName[11:19]:   KeyPerPage,
	_KeyName[19:28]:   KeyLastPage,
	_KeyName[28:37]:   KeyNextPage,
	_KeyName[37:50]:   KeyPreviousPage,
	_KeyName[50:54]:   KeyData,
	_KeyName[54:66]:   KeyCurrentPath,
	_KeyName[66:80]:   KeyFirstPageUrl,
	_KeyName[80:93]:   KeyLastPageUrl,
	_KeyName[93:106]:  KeyNextPageUrl,
	_KeyName[106:119]: KeyPrevPageUrl,
	_KeyName[119:131]: KeyCurrentPage,
	_KeyName[131:136]: KeyTotal,
	_KeyName[136:140]: KeyPath,
	_KeyName[140:147]: KeyKeyMax,
}

// ParseKey attempts to convert a string to a Key.
func ParseKey(name string) (Key, error) {
	if x, ok := _KeyValue[name]; ok {
		return x, nil
	}
	return Key(0), fmt.Errorf("%s is %w", name, ErrInvalidKey)
}

const (
	// ValueStartIndex is a Value of type Start_index.
	ValueStartIndex Value = iota
	// ValueStartPage is a Value of type Start_page.
	ValueStartPage
	// ValuePerPage is a Value of type Per_page.
	ValuePerPage
)

var ErrInvalidValue = errors.New("not a valid Value")

const _ValueName = "start_indexstart_pageper_page"

var _ValueMap = map[Value]string{
	ValueStartIndex: _ValueName[0:11],
	ValueStartPage:  _ValueName[11:21],
	ValuePerPage:    _ValueName[21:29],
}

// String implements the Stringer interface.
func (x Value) String() string {
	if str, ok := _ValueMap[x]; ok {
		return str
	}
	return fmt.Sprintf("Value(%d)", x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x Value) IsValid() bool {
	_, ok := _ValueMap[x]
	return ok
}

var _ValueValue = map[string]Value{
	_ValueName[0:11]:  ValueStartIndex,
	_ValueName[11:21]: ValueStartPage,
	_ValueName[21:29]: ValuePerPage,
}

// ParseValue attempts to convert a string to a Value.
func ParseValue(name string) (Value, error) {
	if x, ok := _ValueValue[name]; ok {
		return x, nil
	}
	return Value(0), fmt.Errorf("%s is %w", name, ErrInvalidValue)
}
